'use client'
import { useState } from "react";

// import { useState } from "react";
  const metadata = {
  title: "Sign up",
  description: "Generated by create next app",
};
export default function Page() {
  const [user, setUser] = useState({
    name: "",
    username: "",
    phone: "",
    company: "",
    email: "",
    password: "", 
  });

  const [errors, setErrors] = useState({
    nameError: "",
    usernameError: "",
    phoneError: "",
    companyError: "",
    emailError: "",
    passwordError: "",
  });

  const handleSubmit = async (event) => {
    event.preventDefault();

    try {
      const response = await fetch('http://localhost:3000/api/users', {
        method: 'POST',
        body: JSON.stringify(user),
        
      });

      if (response.ok) {
        console.log('User created successfully:', user);
      } else {
        console.log('Error:', response.statusText);
      }
    } catch (error) {
      console.error('Error:', error);
    }
  };

  const emailRegex = /^[a-zA-Z0-9]{5,12}@(gmail|hotmail|yahoo|outlook)\.com$/;
  const passwordRegex = /^[a-zA-Z0-9]{8,20}$/;

  const handleChange = (event) => {
    const { name, value } = event.target;
    setUser({ ...user, [name]: value });

    switch (name) {
      case "email":
        setErrors({
          ...errors,
          emailError: emailRegex.test(value) ? "" : "Invalid email address",
        });
        break;
      case "password":
        setErrors({
          ...errors,
          passwordError: passwordRegex.test(value)
            ? ""
            : "Password must be between 8 and 20 characters long",
        });
        break;
      default:
        setErrors({ ...errors, [`${name}Error`]: "" });
    }
  };
  return (
  <>
    <div className="d-flex justify-content-center ">
      <form onSubmit={handleSubmit} className="form-control w-25">
        <label htmlFor="name" className="form-label fw-bold">
          Name
        </label>
        <input
          type="text"
          className="form-control border-black"
          name="name"
          value={user.name}
          onChange={handleChange}
          required
        />
        <p className="text-danger">{errors.nameError}</p>

        <label htmlFor="username" className="form-label fw-bold">
          Username
        </label>
        <input
          type="text"
          className="form-control border-black"
          name="username"
          value={user.username}
          onChange={handleChange}
          required
        />
        <p className="text-danger">{errors.usernameError}</p>

        <label htmlFor="phone" className="form-label fw-bold">
          Phone
        </label>
        <input
          type="tel"
          className="form-control border-black"
          name="phone"
          value={user.phone}
          onChange={handleChange}
          required
        />
        <p className="text-danger">{errors.phoneError}</p>

        <label htmlFor="company" className="form-label fw-bold">
          Company
        </label>
        <input
          type="text"
          className="form-control border-black"
          name="company"
          value={user.company}
          onChange={handleChange}
          required
        />
        <p className="text-danger">{errors.companyError}</p>

        <label htmlFor="email" className="form-label fw-bold">
          Email
        </label>
        <input
          type="email"
          className={`form-control border-black ${
            errors.emailError ? "is-invalid" : "is-valid"
          }`}
          name="email"
          value={user.email}
          onChange={handleChange}
        />
        <p className="text-danger">{errors.emailError}</p>

        <label htmlFor="password" className="form-label fw-bold">
          Password
        </label>
        <input
          type="password"
          className={`form-control border-black ${
            errors.passwordError ? "is-invalid" : "is-valid"
          }`}
          name="password"
          value={user.password}
          onChange={handleChange}
          required
        />
        <p className="text-danger">{errors.passwordError}</p>

        <button type="submit" className="btn btn-primary mt-4 w-100">
          Sign Up
        </button>
      </form>
    </div>
  </>
  )
}

